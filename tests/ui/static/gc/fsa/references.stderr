error: `HasRef::default()` has a drop method which cannot be safely finalized.
  --> $DIR/references.rs:25:22
   |
LL |         use_val(self.a); // should fail
   |                 ------
   |                 |
   |                 caused by the expression here in `fn drop(&mut)` because
   |                 it is a reference (&u64) which is not safe to use in a finalizer.
...
LL |     std::gc::Gc::new(HasRef::default());
   |                      ^^^^^^^^^^^^^^^^^
   |
   = help: `Gc` may run finalizers after the valid lifetime of this reference.

error: `HasRef::default()` has a drop method which cannot be safely finalized.
  --> $DIR/references.rs:25:22
   |
LL |         use_val(self.c[0]); // should fail
   |                 ---------
   |                 |
   |                 caused by the expression in `fn drop(&mut)` here because
   |                 it uses a type which is not safe to use in a finalizer.
...
LL |     std::gc::Gc::new(HasRef::default());
   |     -----------------^^^^^^^^^^^^^^^^^- `Gc::new` requires that [&u64; 2] implements the `FinalizeSafe` trait.
   |
   = help: `Gc` runs finalizers on a separate thread, so drop methods
           must only use values whose types implement `FinalizerSafe`.

error: `HasRef::default()` has a drop method which cannot be safely finalized.
  --> $DIR/references.rs:25:22
   |
LL |         let a = self.a; // should fail
   |                 ------
   |                 |
   |                 caused by the expression here in `fn drop(&mut)` because
   |                 it is a reference (&u64) which is not safe to use in a finalizer.
...
LL |     std::gc::Gc::new(HasRef::default());
   |                      ^^^^^^^^^^^^^^^^^
   |
   = help: `Gc` may run finalizers after the valid lifetime of this reference.

error: `HasRef::default()` has a drop method which cannot be safely finalized.
  --> $DIR/references.rs:25:22
   |
LL |         let c = self.c;
   |                 ------
   |                 |
   |                 caused by the expression in `fn drop(&mut)` here because
   |                 it uses a type which is not safe to use in a finalizer.
...
LL |     std::gc::Gc::new(HasRef::default());
   |     -----------------^^^^^^^^^^^^^^^^^- `Gc::new` requires that [&u64; 2] implements the `FinalizeSafe` trait.
   |
   = help: `Gc` runs finalizers on a separate thread, so drop methods
           must only use values whose types implement `FinalizerSafe`.

error: `HasRef::default()` has a drop method which cannot be safely finalized.
  --> $DIR/references.rs:25:22
   |
LL |         use_val(c[1]); // should fail
   |                 ----
   |                 |
   |                 caused by the expression here in `fn drop(&mut)` because
   |                 it is a reference (&u64) which is not safe to use in a finalizer.
...
LL |     std::gc::Gc::new(HasRef::default());
   |                      ^^^^^^^^^^^^^^^^^
   |
   = help: `Gc` may run finalizers after the valid lifetime of this reference.

error: aborting due to 5 previous errors

